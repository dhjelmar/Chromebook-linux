##-----------------------------------------------------------------------------
# Description
# Linux Peppermint OS with XFCE desktop environment

# XFCE terminal shortcuts
# - C-S-c = copy
# - C-S-v = paste

##-----------------------------------------------------------------------------
# install operating system
# https://www.ifixit.com/Guide/How+to+convert+a+generic+Chromebook+to+Linux+OS/108259
# in last step, selected to install full UEFI ROM firmware
# create manual partitions following setup_mint instructions but using following sizes
# STILL NEED TO MODIFY THE FOLLOWING SINCE THE DISK IS TOO SMALL FOR THIS
#                                   size       format     partition typ      mount point    label and name
#                                   ------     ------     --------------     -----------    --------------
#     - EFI Boot loader:     	     100 MB     fat32	   primary	      /boot/EFI	     boot
#     - Root (system files): 	     100 GB 	ext4 	   primary            /              root
#        - swap: using swap file under root rather than 16 GB ext4 logical partition
#     - Timeshift: 		     300 GB     ext4	   primary			     timeshift
#                                   (3x the root partition size)
#     - Home (personal files):      balance	ext4 	   primary	      /home/<user>   home
#     - no 16GB swap partion made; later will use a swap file under root instead




##-----------------------------------------------------------------------------
# determine which linux version is installed
# open terminal
lsb_release -a


##-----------------------------------------------------------------------------
# update apt-get
sudo apt-get update && sudo apt-get upgrade -y
# if need root access at some point, enter in shell: sudo -i



##-----------------------------------------------------------------------------
# firewall
# https://wiki.debian.org/Uncomplicated%20Firewall%20%28ufw%29
sudo apt-get install ufw
sudo ufw enable
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw status verbose


##-----------------------------------------------------------------------------
# hBlock to block ads, tracking, and malware domains

# https://github.com/hectorm/hblock
curl -o /tmp/hblock 'https://raw.githubusercontent.com/hectorm/hblock/v3.4.0/hblock' \
  && echo '4031d86cd04fd7c6cb1b7e9acb1ffdbe9a3f84f693bfb287c68e1f1fa2c14c3b  /tmp/hblock' | shasum -c \
  && sudo mv /tmp/hblock /usr/local/bin/hblock \
  && sudo chown 0:0 /usr/local/bin/hblock \
  && sudo chmod 755 /usr/local/bin/hblock

# run hBlock
hblock

# add systemd service and timer to schedule daily update of hosts file
curl -o '/tmp/hblock.#1' 'https://raw.githubusercontent.com/hectorm/hblock/v3.4.0/resources/systemd/hblock.{service,timer}' \
  && echo '45980a80506df48cbfa6dd18d20f0ad4300744344408a0f87560b2be73b7c607  /tmp/hblock.service' | shasum -c \
  && echo '87a7ba5067d4c565aca96659b0dce230471a6ba35fbce1d3e9d02b264da4dc38  /tmp/hblock.timer' | shasum -c \
  && sudo mv /tmp/hblock.{service,timer} /etc/systemd/system/ \
  && sudo chown 0:0 /etc/systemd/system/hblock.{service,timer} \
  && sudo chmod 644 /etc/systemd/system/hblock.{service,timer} \
  && sudo systemctl daemon-reload \
  && sudo systemctl enable hblock.timer \
  && sudo systemctl start hblock.timer


##-----------------------------------------------------------------------------
# install chrome
# download deb file from internet search
# open file manager (lower left on screen); double click deb file
# to avoid chrome asking for password to unlock keyring when start
# https://askubuntu.com/questions/31786/chrome-asks-for-password-to-unlock-keyring-on-startup


##-----------------------------------------------------------------------------
# install brave
sudo apt install curl

sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg

echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list

sudo apt update

sudo apt install brave-browser

alias brave='brave-browser &'


##-----------------------------------------------------------------------------
# EMACS

# standard emacs
# sudo apt-get install emacs

# version that installs R within emacs
# https://packages.debian.org/bullseye/all/elpa-ess/download
# recommended to install with synaptic and not manually
# in synaptic, search for elpa-ess, mark for installation, then apply

emacs &


##-----------------------------------------------------------------------------
# VLC
sudo apt-get install vlc

##-----------------------------------------------------------------------------
# GitHub
# https://www.techrepublic.com/article/how-to-use-github-in-chrome-os/
sudo apt-get install git
git config --global user.name dlhjel
git config --global user.email dlhjel@gmail.com
git config --global color.ui true
git config --global core.editor emacs
cd ~/
## create SSH keys
ssh-keygen -t ed25519 -C dlhjel@gmail.com
## hit enter twice after above command
## copy the contents of the ~/.ssh/*pub key and add it to GitHub
mkdir GitHub_repos
cd GitHub_repos
git clone git@github.com:dhjelmar/Chromebook-linux.git
git clone git@github.com:dhjelmar/R-setup.git
# Other commands
#    ! git pull              # update repos from inside repos folder
#    ! git add file1 file2   # stage files for commit (may not need with -a option on commit)
#    ! git commit -am "commit message"   # commit all changes with a message
#    ! git push              # upload committed changes to GitHub


##-----------------------------------------------------------------------------
# Use info from info Chromebook-linux repository
# add following to bottom of ~/.bash_aliases
#        source ~/GitHub_repos/Chromebook-linux/_bash_aliases
ln -s ~/GitHub_repos/Chromebook-linux/_emacs ~/.emacs


##-----------------------------------------------------------------------------
# fix keybindings
#
# volume
# google search for "linux volume command line"
# https://megamorf.gitlab.io/2018/12/16/set-audio-volume-from-command-line/#:~:text=One%20can%20set%20%E2%80%9CSuper%20%26%20%2B,%2D%E2%80%9C%20key%20to%20decrease%20volume.
# steps: settings manager / hardware / keyboard / application shortcuts
#        enter command: amixer set Master 2%-
#        select down-volume key when prompted
#        repeat above but with 2%+ and up-volume key and again with 0% for mute
#
# brighness (need file from GitHub first)
# see: https://askubuntu.com/questions/715306/xbacklight-no-outputs-have-backlight-property-no-sys-class-backlight-folder
#      https://wiki.archlinux.org/title/backlight#xbacklight
sudo apt-get install xbacklight
# may need root permission with sudo -i first for next step
cp ~/GitHub_repos/Chromebook-linux/xorg.conf /etc/X11/
# log out and back in again
# bind using similar steps as for volume for following commands:
#       xbacklight -dec 10
#       xbacklight -inc 10
#
# snap windows left/right/up/down
# Menu / Settings / Window Manager / Keyboard
# click on "Tile window to..." then bind as follows:
##              full             left              right
##    top       Ctrl+Super+Up    Shift+Super+Left  Shift+Super+Right
##    bottom    Ctrl+Super+Down  Shift+Ctrl+Left   Shift+Ctrl+Right
##    left      Ctrl+Super+Left
##    right     Ctrl+Super+Right
#
# delete key
# http://www.afterstep.org/keyboard.html
# lots of info here; did not try it all; what i did try did not work (except in emacs)


##-----------------------------------------------------------------------------
# YouTube-DL (requires Python to run)
sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
sudo chmod a+rx /usr/local/bin/youtube-dl


##-----------------------------------------------------------------------------
# MINICONDA, Python
# first download miniconda installation script from online
sudo bash Miniconda3-latest-Linux-x86_64.sh
# when prompted for installation location, use /opt/miniconda3
# close and reopen terminal to activate conda
# test a conda command
source /opt/miniconda3/bin/activate          # see .bash_aliases additions
conda env list
conda init bash

# initialize conda (writes to .bashrc)
conda init bash
# then deactivate in bash_aliases file
# this solution is nicer than the source option above because
# only need to later type "conda activate py39" to enter environment

# create py39 environment that includes Python version 3.9
#
# initially attempted to also add R and rstudio, but rstudio version was old and could not update it
# conda create --name py39r rstudio python=3.9
# conda activate py39r
# # conda install r-irkernel
# conda install -c r r-irkernel   # this seems to bring in latest R and old version of rstudio
#
# changed to only install python
conda create --name py39 python=3.9
conda activate py39

# install python packages
conda install pandas numpy matplotlib seaborn
# for python packages that do not load with conda, try conda pip



#------------------------
# VS Code (Microsoft Visual Studio Code) (31 GB = 62% full before install; xxxx after install)
# https://www.linuxcapable.com/how-to-install-microsoft-visual-studio-code-on-debian-11/
# update system to avoid conflicts
sudo apt update && sudo apt upgrade -y
# install package to assist in installing software
sudo apt install software-properties-common apt-transport-https wget -y
# import Microsoft GPG key
wget -O- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /usr/share/keyrings/vscode.gpg
# import Michrosoft Visual Source Repository
echo deb [arch=amd64 signed-by=/usr/share/keyrings/vscode.gpg] https://packages.microsoft.com/repos/vscode stable main | sudo tee /etc/apt/sources.list.d/vscode.list
# update system again
sudo apt update
# install VS Code
sudo apt install code -y

# launch
# code

# to remove
# sudo apt remove code --purge
# sudo rm /etc/apt/sources.list.d/vscode.list
# sudo rm /usr/share/keyrings/vscode.gpg



##-----------------------------------------------------------------------------
# R and RSTUDIO
# https://in2techs.com/how-to-install-uninstall-r-and-rstudio-in-linux/?doing_wp_cron=1658515336.9373800754547119140625
# https://www.charlesbordet.com/en/how-to-upgrade-to-R-4-0-0-on-debian/#the-good-solution
# https://cran.r-project.org/bin/linux/debian/#debian-bullseye

# install tool to add repositories to systems file /etc/apt/sources.list
sudo apt install software-properties-common
sudo add-apt-repository "deb http://cloud.r-project.org/bin/linux/debian bullseye-cran40/"

# install key to repository
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key '95C0FAF38DB3CCAD0C080A7BDC78B2DDEABC47B7'

# need cmake to install some packages
sudo apt     install cmake                 # could probably use apt-get
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install libssl-dev

# install R
sudo apt-get install r-base      # R version 4.0.4
# install Rstudio
# download deb file and run with dpkg (or double click in file manager to install)
# deb files here: 
sudo dpkg -i ~/Downloads/rstudio-2022.07.0-548-amd64.deb

# avaliable packages: https://cran.rstudio.com/
# install packages (use R rather than Rstudio for speed)
/usr/bin/R
#
# qualityTools (needed for qqplot)
# install.packages('qualityTools')  # not available for R v4.0.4
install.packages('remotes')
remotes::install_version('qualityTools', '1.55')  # google search shows v1.55 is latest
install.packages('matlib')
install.packages('tibble')
install.packages('readxl')
install.packages('ggplot2')
install.packages('plotly')         # required above openssl install
install.packages('RColorBrewer')   # required above libcurl4 install
install.packages('dplyr')
install.packages('reticulate')
install.packages('superml')
install.packages('DT')
install.packages('stringi')
install.packages('stringr')
install.packages('tolerance')
install.packages('rgl')
install.packages('IAPWS95')
install.packages('maxLik')         # maximum likelihood estimation
install.packages('SuppDists')      # statistical package
install.packages('ExtDist')        # statistical package

# downloaded source packages should get removed automatically at some point
# if not, look here and in similar folders
# rm -r /tmp/RtmpXCABpo/downloaded_packages

# to remove:
# sudo apt-get remove rstudio      # rstudio
# rm -r ~/.local/share/rstudio     # rstudio settings
# sudo apt-get remove r-base       # R packages
# sudo apt-get remove r-base-core  # R and possibly some packages


##-----------------------------------------------------------------------------
# install jupyterlab
conda config --add channels conda-forge
conda install -c conda-forge jupyterlab  # not sure if need generate-config line also
# install toc extension inside JL but first need nodejs
#     conda install nodejs
#     above worked on Windows and installed on Chromebook but JL did not recognize it on Chromebook
# found instructions to get toc here:
#     https://khalido.org/chromebooks/2019/01/setup-crostini-chromebook
#     install nvm which is a script to install nodejs
         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#     restart terminal so nvm command is available
         nvm install node
#     install toc extension
         jupyter labextension install @jupyterlab/toc
# to be able to select a specific environment in jupyterlab
      conda install nb_conda_kernels
      conda install ipykernel 

# install nbconvert so can export jupyterlab to PDF
# looks like this takes about 1GB of space though so may not want on Chromebook
# https://nbconvert.readthedocs.io/en/latest/install.html
conda install nbconvert
sudo apt-get install pandoc
# following for linux
sudo apt-get install texlive-xetex texlive-fonts-recommended texlive-generic-recommended
# following for Windows: MixTex instead of xetex


##-----------------------------------------------------------------------------
# Create ICE applications:
# ICE enables container to be made for a site (e.g., Google Docs)
# and adds it to menu so it pops up w/o some of the browser stuff like URL
# Create for: Outlook


##-----------------------------------------------------------------------------
# Zoom
cd ~/Downloads
wget https://zoom.us/client/latest/zoom_amd64.deb
sudo apt install ./zoom_amd64.deb
zoom   # to launch
# sudo apt remove zoom

# 'unsandboxed' warning when tried to update to new version
# look here near or at bottom of postings for potential solution
# https://forums.linuxmint.com/viewtopic.php?t=417856


##-----------------------------------------------------------------------------
# xfce terminal header (border) turned transparent at some point
# did the following to fix it
# opened
#    /home/dhjelmar/.config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml
# then searched for frame_opacity, commented out original line and replaced with 100 for opacity
#        <!--- original
#        <property name="frame_opacity" type="int" value="14"/>
#        --->
#        <property name="frame_opacity" type="int" value="100"/>


##-----------------------------------------------------------------------------
# emoji only seem to be black and white and all not displaying correctly even then
# tried following, but not clear it worked (maybe after reboot)
sudo curl -o /etc/fonts/local.conf https://pastebin.com/raw/atfUQQ2j



##-----------------------------------------------------------------------------
## CHEESE - program needed for endoscope to work
## launch with "cheese"



##-----------------------------------------------------------------------------
## DROPBOX
## https://vitux.com/how-to-install-dropbox-on-debian-10/
cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf –
~/.dropbox-dist/dropboxd

## https://linuxhint.com/install_dropbox_debian_10/
## download Ubuntu 64-bit from dropbox site
##     https://www.dropbox.com/install-linux
cd ~/Downloads
sudo apt update
sudo apt install ./dropbox_2020.03.04_amd64.deb
sudo apt install python3-gpg
sudo reboot

## ## if need to close Dropbox and reopen
## sudo pgrep -lfa dropbox   # checks if running
## sudo pkill dropbox
## ## restart from application menu

## to uninstall
## some of the following may not be needed
dropbox stop
dropbox status  # Should report "not running"
rm -rf ~/.dropbox-dist
rm -rf /var/lib/dropbox
rm -rf ~/.dropbox*
sudo apt-get remove nautilus-dropbox
sudo apt-get remove dropbox
sudo apt-get autoremove
rm /etc/apt/source.d/dropbox

#------------------------
## KeePassXC


##-----------------------------------------------------------------------------
## KEEPASS
## keyanywhere plugin does not seem to work on Linux so cannot link to dropbox
## could map to dropbox but I do not want to because of space issues
sudo apt-get update
sudo apt-get install keepass2
## launch with "keepass2" or "kp2" alias
sudo apt-get install keepassxc
## launch with "keepassxc" or "kpx" alias


##-----------------------------------------------------------------------------
## QUARTO
## installed as extension within vscode so do not think I need the following
## download deb file from web
## sudo dpkg -i ~/Downloads/quarto-1.3.290-linux-amd64.deb
## to remove quarto
## sudo apt-get remove quarto


##-----------------------------------------------------------------------------
## Foxit PDF reader
## download tar file from https://www.foxit.com/downloads/pdf-reader-thanks.html?product=Foxit-Reader&platform=Linux-64-bit&version=&package_type=&language=English&formId=download-reader
pd ~/Downloads
tar xzvf FoxitReader*.tar.gz
sudo chmod a+x FoxitReader*.run
sudo ./FoxitReader*.run
## usage: FoxitReader &
## to uninstall:
##    sudo /opt/foxitsoftware/foxitreader/maintenancetool


##-----------------------------------------------------------------------------
## OCRmyPDF
## install ghostscript (required)
????????????
## install tesseract (required)
???????????
## install ocrmypdf
sudo apt install ocrmypdf


##-----------------------------------------------------------------------------
## command line fuzzy finder
## https://github.com/junegunn/fzf#using-linux-package-managers
## following did not work so commented out and instead wrote fh function
## sudo apt install fzf
## copy shell/key-bindings.bash into fuzzy_finder.bash


##-----------------------------------------------------------------------------
##-----------------------------------------------------------------------------
## auto-mount usb drives
# https://github.com/Ferk/udev-media-automount
# download: https://github.com/Ferk/udev-media-automount/archive/refs/heads/master.zip
unzip master.zip
cd udev-media-automount-master
sudo make install
sudo udevadm control --reload-rules
sudo udevadm trigger


##-----------------------------------------------------------------------------
## OpenSCAD
## https://openscad.org/downloads.html
sudo apt-get install openscad


##----------------------------------------------------------------------------
## OnlyOffice
## https://helpcenter.onlyoffice.com/installation/desktop-install-ubuntu.aspx

## Add GPG key:
mkdir -p -m 700 ~/.gnupg
gpg --no-default-keyring --keyring gnupg-ring:/tmp/onlyoffice.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys CB2DE8E5
chmod 644 /tmp/onlyoffice.gpg
sudo chown root:root /tmp/onlyoffice.gpg
sudo mv /tmp/onlyoffice.gpg /usr/share/keyrings/onlyoffice.gpg

## Add desktop editors repository:
echo 'deb [signed-by=/usr/share/keyrings/onlyoffice.gpg] https://download.onlyoffice.com/repo/debian squeeze main' | sudo tee -a /etc/apt/sources.list.d/onlyoffice.list

## Update the package manager cache:
sudo apt-get update

## Now the editors can be easily installed using the following command:
sudo apt-get install onlyoffice-desktopeditors

## to remove
## sudo apt purge onlyoffice-dsktopeditors




##-----------------------------------------------------------------------------
## SSH - install as client (i.e., not the server)
# see instructions in setup_mint

## On Windows, was able to access files but not start GUI programs likely because do not have Windows Server
## Attempted to follow instructions here:
## https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui
## Username can be found by entering following in Windows PowerShell
##      $env:USERNAME
## and servername can be found by entering following in Windows PowerShell
##      ipconfig | select-string  ('(\s)+IPv4.+\s(?<IP>(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}))(\s)*') -AllMatches | %{ $_.Matches } | % { $_.Groups["IP"]} | %{ $_.Value }
## Log into remote PC from linux using password at the prompt (e.g., ssh jack@192.168.1.101):
##      ssh username@servername
## The above does not work with MS Account. Need stand alone account. Grrr#!!**!
## https://answers.microsoft.com/en-us/windows/forum/all/ssh-login-to-microsoft-account-linked-windows/69ea0428-5b06-401c-bb86-e45228709e0b
##
##
## IDEA:
##    - Create local admin account
##    - Change MS linked account to "standard user"
##    - ssh into local admin account (or would it be better to ssh into local standard user account?)
#
## If can log in using the above, can replace password to ssh with a keypair. 
## On Linux client laptop, generate new ssh keypair
## (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=linux)
## From terminal where found username@servername on Windows from above: 
##      cd ~/.ssh
##      ssh-keygen -t ed25519 -C "username@servername"
## Name the key, e.g., id_ed25519_keyname (creates id_ed25519_keyname and id_ed25519_keyname.pub).
## Recommended to add a pin for the key.
## Start ssh agent
##      eval "$(ssh-agent -s)"
## Add private key to agent
##      ssh-add ~/.ssh/id_ed25519_keyname
## To remove private key from agent
##      ssh-add -d ~/.ssh/id_ed25519_keyname
## From Linux while logged into Windows PC through ssh, enter the following in terminal
## to add the public key to Windows in ~/.ssh/authorized_keys file.
##      ssh-copy-id -i ~/.ssh/id_ed25519_keyname.pub username@servername
## above step failed so tried looking here:
## https://superuser.com/questions/1451241/command-to-copy-client-public-key-to-windows-openssh-sftp-ssh-server-authorized
## and used manual process:
##     - Copy xxxxxx.pub file to windows server at location C:\Users\username\.ssh\authorized_keys
##     - Update ACL on windows server using command
##             icacls.exe "C:\Users\username\.ssh" /inheritance:r /gr
## Still not able to log in with keypair.
## Again tried following which automatically created authorized_keys file
##     - In Windows C:/Users/username, moved manually created authorized_keys file to authorized_keys_junk
##     - In Linux ssh session, entered: ssh-copy-id username@servername
## Next ssh should only require pin and not password, but it still is asking for a password.


## useful commands to use over ssh
sudo shutdown -h        # to shutdown server

# play vlc on server TV, try this:
export DISPLAY=:0         # original value was :0.0
vlc -f file.mp4

# show pictures on server TV, try this:




##-----------------------------------------------------------------------------
##-----------------------------------------------------------------------------
# To update system
# try peppermint_hub / hardware & software / update manager
# or manual or automatic method described at: 
#     https://www.fosslinux.com/49955/keep-your-debian-updated.htm

## manual method
sudo apt update
apt list --upgradable
# if above only returns "Listing... Done" then there is nothing to update
# to upgrade a specific package
sudo apt --only-upgrade install <package_name>
# to upgrade everything
sudo apt upgrade -y
# clean up when done
sudo apt-get clean
# also run the following
sudo apt-get autoclean

## automatic method
## programmed into update function in _bash_aliases

## if get a failure using sudo apt update due to expired key
## https://stackoverflow.com/questions/66400254/invalid-signature-for-mysql-repository
## sudo apt-key list     # to see keys
## the key with following, e.g.:
## sudo apt-key del '859B E8D7 C586 F538 430B  19C2 467B 942D 3A79 BD29'
## add new key with, e.g.:
## sudo apt-key adv --keyserver pgp.mit.edu --recv-keys B7B3B788A8D3785C

