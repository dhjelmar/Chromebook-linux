#------------------------
if [[ "$OSTYPE" == "msys"* ]]; then
    # operating system is Windows through Git Bash
    os='windows'
    git_path="D:/Documents/01_Dave/Programs/GitHub_home"
else
    # operating system on Linux
    if [[ "$XDG_SESSION_DESKTOP" == "cinnamon" ]]; then
        os='mint'        # linux mint debian addition on tower
    else
	os='peppermint'  # linux peppermint on laptop
    fi	
    git_path="$HOME/Documents/GitHub"
fi



#------------------------
# notes
# following will reinitialize terminal
# exec bash
# Ctrl--       to zoom out in XFCE terminal (Ctrl-- in Chrome)
# Ctrl-shift-+ to zoom in  in XFCE terminal (Ctrl-+ in Chrome)


#------------------------
alias bashrc="source $HOME/.bashrc"
alias lsl="ls -alF"
alias lsd="ls -d */"
alias pd="pushd"
alias pp="popd"
alias psa='ps -e'   # all processes
alias gith="cd $git_path"                 # used on Windows
alias gitw="cd $git_path/../GitHub_work"  # used on Windows
alias ff="find . -print | grep -i"
if [[ "$os" == 'windows' ]]; then
    alias pictures="pd 'D:\\MY Pictures'"     # only need in Git Bash
elif [[ "$os" == "mint" ]]; then
    alias pictures="cd $HOME/Pictures"
    alias hdd="cd /mnt/HDD_backup_ntfs/"
    alias ntfs="cd /mnt/LMDE_SDD_ntfs/"
    alias windows="cd /mnt/Windows_SSD_ntfs"
    alias wdoc="cd /mnt/Windows_SSD_ntfs/Documents"
    alias wdave="cd /mnt/Windows_SSD_ntfs/Documents/01_Dave"
    alias wpict="cd /mnt/Windows_SSD_ntfs/MY\ Pictures"
else
    alias pictures="$HOME/Pictures"
fi
# linux version, lv
alias lv="lsb_release -a"
alias rmold="rm *~"
# same as "tree" command in unix
alias tree="tree.com //a //f"
# to only list directors (same as "tree -d" command in unix)
alias treed="tree.com //a"
cdl () {
    # change to last modified folder
    local lastfolderv=`ls -dltr */ | tail -n 1`
    local lastfolder=`echo ${lastfolderv##* }`
    cd $lastfolder
}
alias ram="free -h"     # shows available RAM


#------------------------
# thunderbird
alias tb='thunderbird &'
alias tb='flatpak run org.mozilla.Thunderbird 2>/dev/null &'

#------------------------
# Brave
alias brave='brave-browser 2>/dev/null &'

#------------------------
# Signal
alias signal='signal-desktop &'


#------------------------
# ThinLinc (uses ssh public key)
# tlclient [options] [server][:port]
tl () {
  /opt/thinlinc/bin/tlclient-openconf config_file_maybe
}


#------------------------
# MOUNT USB DRIVE
# https://askubuntu.com/questions/37767/how-to-access-a-usb-flash-drive-from-the-terminal
alias disks="lsblk"    # list disks; USB will likely be sda or something similar
mount () { 
    # Usage example: mount sda1
    udisksctl mount --block-device /dev/$1
}
unmount(){
    # Function that unmounts, if needed, then powers off a USB drive
    # Usage example: unmount sda1

    # # original simple unmount and power off function
    # udisksctl unmount -b /dev/$1 && udisksctl power-off -b /dev/$1

    disk=`lsblk | grep $1`                    # find target disk
    mounted="$(echo $disk | cut -d' ' -f7)"   # parse to find mountpoint (6th column)
    echo "disk = " $disk
    echo "mounted = " $mounted
    if [ -z "$mounted" ]
    then
        # $var is empty so just power off drive
	echo "Power off drive $1"
	udisksctl power-off -b /dev/$1
    else
        # $var is not empty so unmount and power off drive
	echo "Unmount and power off drive $1"
        udisksctl unmount -b /dev/$1 && udisksctl power-off -b /dev/$1
    fi
}

# automounting usb drives
# https://github.com/Ferk/udev-media-automount
# to list disks: disks
# to access a specific disk, use the location identified as the mountpoint
# e.g., cd '/media/Samsung USB.exfat'
#       cd  /media/Samsung\ USB.exfat


#------------------------
# KeePass
alias kp="keepass2 &"
alias kp2="keepass2 &"


#------------------------
## KeePassXC
alias kpx="keepassxc &"


#------------------------
## BAOBAB              <-- not installed
alias bb="baobab &"

#------------------------
# EMACS
# sudo apt-get install emacs
# 80x33 size works; 0,0 position should be upper left but does not work
if [[ "$OSTYPE" == "msys"* ]]; then
    # operating system is Windows through Git Bash
    e () { "C:/Program Files/Emacs/emacs-28.2/bin/runemacs.exe" -itype -load ~/.emacs.d/init.el "$@" & }
else
    # operating system on Linux
    ## alias e="emacs . -geometry 103x52+0+0 &"
    e () { emacs -itype -load ~/.emacs.d/init.el "$@" & }
    ## following fails if add & because user needs to add password
    se () { sudo emacs -itype -load ~/.emacs.d/init.el "$@" ; }
fi


#------------------------
# ZOOM
alias zoom="zoom &"

#------------------------
# YouTube Downloader
# https://ostechnix.com/youtube-dl-tutorial-with-examples-for-beginners/
# bash does not allow variable to be passed to an alias so instead define function
ytdl () {
   # download url as mp4 and rename
   local url="$1"
   local fn="$2"
   if [ -z "$fn" ]
   then
      /usr/local/bin/youtube-dl $url &          # file name will be 1st argument (i.e., url)
   else
      /usr/local/bin/youtube-dl -o $fn $url &   # file name will be 2nd argument
   fi
}


#------------------------
# CONDA (Anaconda or Miniconda)

if [[ "$OSTYPE" = "msys"* ]]; then
    # Get conda running in the base environment, activate sub-environment
    ## system is Windows (not sure this is needed; it probably gets run through .profile)
    ## enable use of miniconda from within Git Bash
    . C:/Users/dlhje/anaconda3/etc/profile.d/conda.sh
    # change to a specific enviroment
    conda activate py39
fi

# may not need following
#conda init
# The base environment is activated by default (can change this to False)
# conda config --set auto_activate_base True

# alias to start anaconda
alias an='anaconda-navigator &'

# conda commands
#    conda env list
#    conda create -n py39
#    conda activate py39
#    conda deactivate
#    conda env remove --name conda_env
#    conda list      # lists packages and version
#    conda install packagename
#    conda install --offline C:\pymc-2.3.5-np110py35_0.tar.bz2
#    conda update  packagename
#
#    to export / import environments
#       conda env export > environment.yml 
#       conda env create -f ml_mython_2020.yml 
#       conda activate ml_python_2020
#       conda deactive


#------------------------
# VS Code, JypterLab, R, rstudio
# location of the following set using conda and depends on the environment
# location: /opt/miniconda3/envs/py37rc/bin/
vs () { code $1 & }
jl () { jupyter lab $1 & }
rs () { rstudio $1 & }
alias R="R --no-save --no-restore-data --quiet"
alias r="R"

# alias rs="C:/Program Files/RStudio/bin/rstudio.exe"

# run "code ~/.bashrc" in bash to open the file in VS Code
# https://code.visualstudio.com/docs/terminal/shell-integration
# Note: as of 1/3/24, use in Git Bash is experimental
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path bash)"


#------------------------
# KeePass
alias kp="keepass2 &"

#------------------------
# FireFox
alias fox="/opt/firefox/./firefox &"


#------------------------
# Foxit
foxit () { FoxitReader $1 & }


#------------------------
## OCRmyPDF
ocr () { ocrmypdf --force-ocr $1 $2 & }


#------------------------
## OnlyOffice
if [[ "$DESKTOP_SESSION" != "xfce" ]]; then
    ## using Mint LMDE on tower
    oo () { desktopeditors $1 & }
else
    ## using Peppermint on laptop
    oo () {
       ## above throws throws nonfatal errors on Peppermint
       ## so replaced with following to suppress errors
       env -u SESSION_MANAGER desktopeditors &>/dev/null & disown
    }
fi

#echo timestamp=$(date+%s)
#echo timestamp=$(date+%S)
#echo timestamp=$(date+_%Y-%m-%d_%H-%M-%S_%s)
export XDG_RUNTIME_DIR=/tmp/onlyoffice
export RUNLEVEL=3


#------------------------
## LibraOffice
lo () { libreoffice --calc $1 ; }

#------------------------
# PICTURE TOOLS
# exiftool to edit picture meta data
# downloaded Linux version of exiftool (on Windows, download Windows version even though run in Git Bash)
# dlh script to use folder names to rename pictures and add metadata tags
alias exiftool='/c/Windows/exiftool.exe'
exifname () {
    # script to rename pictures based on folders
    ~/GitHub_repos/photo_organize/exifname.sh
}
alias exdirclean='rm -r *.jpg_original'


#------------------------
# Git
alias reindex='rm -f .git/index; git reset'
gitu () {
    ## remove file from git index and keep in working area
    ## usage: gitu filename
    git rm --cached $1
}
giti () {
    echo 'Git instructions:'
    echo '    reindex = resets index of cached git repository if messed up'
    echo '            = alias to "rm -f .git/index; git reset"'
    echo '    gitu fn = to undo commit of file fn'
    echo '            = alias to "git rm --cached $1" to undo commit of file $1'
}


#------------------------
# fuzzy finder
# does not seem to be updated for debian 11 so commented out the following
# source ~/Documents/GitHub_repos/Chromebook-linux/fuzzy_finder.bash
# alias fuz='fzf'

# find history (since the above does not work
fh () { history | grep -i $1 & }


#------------------------
# OpenSCAD
os () { openscad $1 & }

#------------------------
# UPDATE SYSTEM
update () {
    sudo apt update
    apt list --upgradable
    sudo apt upgrade -y
    echo "clean up"
    sudo apt-get clean
    sudo apt-get autoclean
    sudo apt autoremove
}




#------------------------
<<mycommentblock
this line is part of the comment block
so is this one
mycommentblock


#------------------------
# set terminal colors
eval "$(dircolors $git_path/Chromebook-linux/setup_mint_files/.dircolors)"

# define other aliases and functions for use with photos
echo "source $git_path/photo_organize/_bashrc_exiftool.sh"
     source "$git_path/photo_organize/_bashrc_exiftool.sh"
