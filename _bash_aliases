#------------------------
# the following really only needs to be in the higher level source call and can be commented out here
if [[ "$OSTYPE" == "msys"* ]]; then
    # operating system is Windows through Git Bash
    git_path="f:/Documents/01_Dave/Programs/GitHub_home/"
else
    # operating system on Linux
    git_path="~/Documents/GitHub_repos/"
fi



#------------------------
# notes
# following will reinitialize terminal
# exec bash
# Ctrl--       to zoom out in XFCE terminal (Ctrl-- in Chrome)
# Ctrl-shift-+ to zoom in  in XFCE terminal (Ctrl-+ in Chrome)


#------------------------
alias bashrc="source $HOME/.bashrc"
alias lsl="ls -alF"
alias lsd="ls -d */"
alias pd="pushd"
alias pp="popd"
alias cdr="cd ~/Documents/GitHub_repos"   # used on linux
alias gith="cd $git_path"                 # used on Windows
alias gitw="cd $git_path/../GitHub_work"  # used on Windows
alias ff="find . -print | grep -i"
alias pictures="pd 'F:\\MY Pictures'"     # only need in Git Bash
# linux version, lv
alias lv="lsb_release -a"
alias rmold="rm *~"
# same as "tree" command in unix
alias tree="tree.com //a //f"
# to only list directors (same as "tree -d" command in unix)
alias treed="tree.com //a"
cdl () {
    # change to last modified folder
    local lastfolderv=`ls -dltr */ | tail -n 1`
    local lastfolder=`echo ${lastfolderv##* }`
    cd $lastfolder
}



#------------------------
# MOUNT USB DRIVE
# https://askubuntu.com/questions/37767/how-to-access-a-usb-flash-drive-from-the-terminal
alias disks="lsblk"    # list disks; USB will likely be sda or something similar
mount () { 
    # Usage example: mount sda
    udisksctl mount --block-device /dev/$1
}
unmount(){
    # Function that unmounts, if needed, then powers off a USB drive
    # Usage example: unmount sda

    # # original simple unmount and power off function
    # udisksctl unmount -b /dev/$1 && udisksctl power-off -b /dev/$1

    disk=`lsblk | grep $1`                    # find target disk
    mounted="$(echo $disk | cut -d' ' -f7)"   # parse to find mountpoint (6th column)
    echo "disk = " $disk
    echo "mounted = " $mounted
    if [ -z "$mounted" ]
    then
        # $var is empty so just power off drive
	echo "Power off drive $1"
	udisksctl power-off -b /dev/$1
    else
        # $var is not empty so unmount and power off drive
	echo "Unmount and power off drive $1"
        udisksctl unmount -b /dev/$1 && udisksctl power-off -b /dev/$1
    fi
}



#------------------------
## KeePassXC
alias kp2="keepass2 &"
alias kpx="keepassxc &"


#------------------------
## BAOBAB              <-- not installed
alias bb="baobab &"

#------------------------
# EMACS
# sudo apt-get install emacs
# 80x33 size works; 0,0 position should be upper left but does not work
if [[ "$OSTYPE" == "msys"* ]]; then
    # operating system is Windows through Git Bash
    e () { "C:/Program Files/Emacs/emacs-28.2/bin/runemacs.exe" -itype -load ~/.emacs.d/init.el "$@" & }
else
    # operating system on Linux
    ## alias e="emacs . -geometry 103x52+0+0 &"
    e () { emacs -itype -load ~/.emacs.d/init.el "$@" & }
fi


#------------------------
# ZOOM
alias zoom="zoom &"

#------------------------
# YouTube Downloader
# https://ostechnix.com/youtube-dl-tutorial-with-examples-for-beginners/
# bash does not allow variable to be passed to an alias so instead define function
ytdl () {
   # download url as mp4 and rename
   local url="$1"
   local fn="$2"
   if [ -z "$fn" ]
   then
      /usr/local/bin/youtube-dl $url &          # file name will be 1st argument (i.e., url)
   else
      /usr/local/bin/youtube-dl -o $fn $url &   # file name will be 2nd argument
   fi
}


#------------------------
# MINICONDA

## following may just be for PC
# Get conda running in the base environment, activate sub-environment
if [[ "$OSTYPE" = "msys"* ]]; then
    ## enable use of miniconda from within Git Bash
    . C:/Users/dlhje/anaconda3/etc/profile.d/conda.sh
    conda activate py39
else
    # operating system is Linux (not Git Bash in Windows)
    source /opt/miniconda3/bin/activate
    conda activate py39r
fi
export XDG_RUNTIME_DIR=""
## conda activate
## conda env list
## conda activate py39
## conda deactivate

## following may not be needed for PC or linux
## Get conda running in the base environment, activate sub-environment
## source /opt/miniconda3/bin/activate
## conda activate py39r
## export XDG_RUNTIME_DIR="/tmp/runtime-dhjelmar"
##export RUNLEVEL=3
## execute following to set default to either activate or not with true or false
## do not execute this every time the bash alias file gets run
##      conda config --set auto_activate_base true

# conda commands
#    conda create -n py39
#    conda activate py39
#    conda deactivate
#    conda env list
#    conda env remove --name conda_env
#    conda list      # lists packages and version
#    conda install packagename
#    conda install --offline C:\pymc-2.3.5-np110py35_0.tar.bz2
#    conda update  packagename
#
#    to export / import environments
#       conda env export > environment.yml 
#       conda env create -f ml_mython_2020.yml 
#       conda activate ml_python_2020
#       conda deactive


#------------------------
# VS Code, JypterLab, R, rstudio
# location of the following set using conda and depends on the environment
# location: /opt/miniconda3/envs/py37rc/bin/
vs () { code $1 & }
jl () { jupyter lab $1 & }
rs () { rstudio $1 & }
alias R="R --no-save --no-restore-data --quiet"
alias r="R"
# alias rs="C:/Program Files/RStudio/bin/rstudio.exe"

# run "code ~/.bashrc" in bash to open the file in VS Code
# https://code.visualstudio.com/docs/terminal/shell-integration
# Note: as of 1/3/24, use in Git Bash is experimental
[[ "$TERM_PROGRAM" == "vscode" ]] && . "$(code --locate-shell-integration-path bash)"

#------------------------
# KeePass
alias kp="keepass2 &"

#------------------------
# FireFox
alias fox="/opt/firefox/./firefox &"


#------------------------
# Foxit
foxit () { FoxitReader $1 & }


#------------------------
## OCRmyPDF
ocr () { ocrmypdf --force-ocr $1 $2 & }


#------------------------
# PICTURE TOOLS
# exiftool to edit picture meta data
# downloaded Linux version of exiftool (on Windows, download Windows version even though run in Git Bash)
# dlh script to use folder names to rename pictures and add metadata tags
alias exiftool='/c/Windows/exiftool.exe'
exifname () {
    # script to rename pictures based on folders
    ~/GitHub_repos/photo_organize/exifname.sh
}
alias exdirclean='rm -r *.jpg_original'


#------------------------
# Git
alias reindex='rm -f .git/index; git reset'
gitu () {
    ## remove file from git index and keep in working area
    ## usage: gitu filename
    git rm --cached $1
}
giti () {
    echo 'Git instructions:'
    echo '    reindex = resets index of cached git repository if messed up'
    echo '            = alias to "rm -f .git/index; git reset"'
    echo '    gitu fn = to undo commit of file fn'
    echo '            = alias to "git rm --cached $1" to undo commit of file $1'
}



#------------------------
# UPDATE SYSTEM
update () {
    # sudo apt update
    upgrade_list=`apt list --upgradable`
    if [ ${upgrade_list} == "Listing..." ]
    then
        echo "nothing to upgrade"
    else
        echo "upgrade everything"
        sudo apt upgrade -y
        echo "clean up"
        sudo apt-get clean
        sudo apt-get autoclean
    fi
}

#------------------------
<<mycommentblock
this line is part of the comment block
so is this one
mycommentblock


#------------------------
echo source $git_path"photo_organize/_bashrc_exiftool.sh"
     source $git_path"photo_organize/_bashrc_exiftool.sh"
