##-----------------------------------------------------------------------------
# Description
# Linux Mint LMDE 6 faye (based on Debian 12 bookworm)
# see that with: cat /etc/os-release

# terminal shortcuts
# - C-S-c = copy to clipboard
# - C-S-v = C-S-insert = paste from clipboard
# -   S-v =   S-insert = paste what is highlighted


##-----------------------------------------------------------------------------
# install operating system

# Useful videos
# https://www.youtube.com/watch?v=J2sRqICVi7Y
# https://www.youtube.com/watch?v=QKT-hXLfN2c

# rough steps
# - Create bootable USB with operating system
#   - Download iso
#   - Install on USB using Etcher (https://www.balena.io/etcher/)
#   - Flash ios to USB
# - In Windows
#   - Install MiniTool Disk Partition Manager
#   - Create unallocated free space on disk for LMDE
#     (if needed, delete partition in either MiniTool on Windows or Gparted on install disk will unallocate the space)
# - Boot from USB
#   - Enter BIOS with, e.g., F2 or Del during boot
#     - Go to exit
#     - Select usb entry for debian UEFI
#     - Start LMDE 6 64-bit
#   - Install LMDE
#     - Select installation icon on desktop
#     - When asked about partitions, select "other" rather than "automatic"
#
#        TOWER
#        - Manual setup of 3 partitions on new SSD
#           - EFI Boot loader: 100 MB fat32 primary partition; mount point /boot/EFI
#           - Root (system files): 100 GB ext4 primary partition, mount point /
#              - swap: using swap file under root rather than 16 GB ext4 logical partition
#           - Home (personal files): 400 GB ext4 primary partition, mount point /home/<user>
#        - Manual setup of 1 partition on a separate drive
#           - Timeshift: 300 GB (3x the root partition size) primary partition on some other drive
#              - Search / Timeshift (or can find as "System Snapshots" in the welcome window
#              - rsync is the only option for Debian
#              - Select the ext4 partition that I created on a separate drive
#              - Snapshot leves
#                 - weekly: keep 2
#                 - boot  : keep 3
#              - Description: Snapshots are not scheduled at fixed times.
#                             A maintenance task runs once overy hour and creates snapshots as needed.
#                             Boot snapshots are created with a delay of 10 minutes after system startup.
#              - User home directories (options: exclude all files; include only hidden files; include all files)
#                 - /home/username: exclude all files (default)
#                 - /root         : exclude all files (default)
#
#         TOWER2
#         - Manual setup of 4 partitions on single SSD
#	    - Use GParted to setup to create following partitions; used same thing for name and label of each partition
#                                            size       format     partition typ      mount point    label and name
#                                            ------     ------     --------------     -----------    --------------
#              - EFI Boot loader:     	     100 MB     fat32	   primary	      /boot/EFI	     boot
#              - Root (system files): 	     100 GB 	ext4 	   primary            /              root
#                 - swap: using swap file under root rather than 16 GB ext4 logical partition
#              - Timeshift: 		     300 GB     ext4	   primary			     timeshift
#                                            (3x the root partition size)
#              - Home (personal files):      balance	ext4 	   primary	      /home/<user>   home
#              - no 16GB swap partion made; later will use a swap file under root instead
#              
#          - still in GParted, edit flags for EFI boot loader partition
#	     - check the "boot" and "esp" fl
#          - exit GParted
#          - Refresh partitioning window in installer
#          - Right click each created device and assign mount points
#             - 100 MB fat32 to /boot/efi
#             - 100 GB ext4  to /
#             - 300 GB ext4  can leave blank for now
#             - 594 GB ext4  to /home
#
#     - Grub menu needs to be the same partition as the boot partition

#     - finish installation of LMDE letting it reboot when done
#     - turn on firewall in "First Steps"
#     - setup TimeShift in "First Steps" / TimeShift / Settings and create 1 snapshot
#       - Type: rsync
#       - Location: Select location that was created for timeshift on same or different drive


##-----------------------------------------------------------------------------
# determine which linux version is installed
# open terminal
lsb_release -a


##-----------------------------------------------------------------------------
# DUAL BOOT MESSED UP WINDOWS / LINUX TIME (may have been messing up Brave and causing "Aw, Snap!)
# https://itsfoss.com/wrong-time-dual-boot/
# At bootup, the computer uses the hardware clock to set the system clock.
# After that, the system clock is used to track time.
# By default, Windows assumes the time stored on the hardware clock is the local time.
# By default, Linux assumes the time stored on the hardware clock is UTC, not local time.
# Any change in Windows or Linux to the system clock is used to set the hardware clock.

# The following should make Linux use local time for the hardware clock.
# (Could have done something different, but this is recommended as easiest.)
timedatectl set-local-rtc 1



##-----------------------------------------------------------------------------
# Software Installation in order of preference:
#   (1) Flatpack (Flathub)
#   (2) System package
#   (3) deb file
#
# My understanding on Flatpack (Flathub) vs. system versions of packages:
#       Flatpack is bigger because it is more sandboxed by including all system dependencies
#       regardless of whether they already exist.
#       Flatpack is generally a more recent version.
#
# Flatpack and System packages are both better than deb file installations because
# they are automatically included in system software updates. Not sure if this
# is true of deb files based on instructions I've worked through.


##-----------------------------------------------------------------------------
# update apt-get

sudo apt-get update && sudo apt-get upgrade -y
# if need root access at some point, enter in shell: sudo -i


##-----------------------------------------------------------------------------
# firewall (UFW = Uncomplicated FireWall)
# help.ubuntu.com/community/Gufw
#    - Search / firewall
#      - profile: Home
#      - Status: Slide to on
#      - Incoming: Deny (default)
#      - Outgoing: Allow (default) <-- needed to, for example, send a request to the internet
#      - Press Rule / + to open "Add a Firewall Rule" popup


##-----------------------------------------------------------------------------
# install chrome
# could not find in software manager
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install ./google-chrome-stable_current_amd64.deb

# if slow, try suggestions here
# https://forums.linuxmint.com/viewtopic.php?t=302023
# First try the last post. If that doesn't work, could try purging and reinstall Timeshift which helped someone else.

##-----------------------------------------------------------------------------
# GitHub
# https://www.techrepublic.com/article/how-to-use-github-in-chrome-os/
sudo apt-get install git
git config --global user.name dlhjel
git config --global user.email dlhjel@gmail.com
git config --global color.ui true
git config --global core.editor emacs
cd ~/
## create SSH keys
ssh-keygen -t ed25519 -C dlhjel@gmail.com
## hit enter twice after above command
## copy the contents of the ~/.ssh/*pub key and add it to GitHub
mkdir ~/Documents/GitHub
cd ~/Documents/GitHub
git clone git@github.com:dhjelmar/Chromebook-linux.git
git clone git@github.com:dhjelmar/R-setup.git
# Other commands
#    ! git pull              # update repos from inside repos folder
#    ! git add file1 file2   # stage files for commit (may not need with -a option on commit)
#    ! git commit -am "commit message"   # commit all changes with a message
#    ! git push              # upload committed changes to GitHub


##-----------------------------------------------------------------------------
# Use info from info Chromebook-linux repository
# add following to bottom of ~/.bash_aliases
#        source ~/Documents/GitHub/Chromebook-linux/_bash_aliases

##-----------------------------------------------------------------------------
# EMACS

# search / software manager / emacs

# added statistical mode
# search / software manager / elpa-ess

# .emacs file
ln -s ~/Documents/GitHub/Chromebook-linux/_emacs_mint ~/.emacs.d/init.el

# run with
# e .


##-----------------------------------------------------------------------------
# Thunderbird
# uninstalled system version that came with LMDE to use flatpack instead

# needed to change so unread email would be magenta
# in "advanced preferences, search for userprof and toggle:
#     toolkit.legacyUserProfileCustomizations.stylesheets to true
# 
# if using system version of thunderbird (lsz* folder might have a different name):
#    cd ~/.thunderbird/lszg1so8.default-default
#    mkdir chrome
#    cd chrome
#    ln -s ~/Documents/GitHub/Chromebook-linux/setup_mint_files/userChrome.css userChrome.css
#
# if using flatpack version of thunderbird (lsz* folder might have a different name):
#    cd ~/.var/app/org.mozilla.Thunderbird/.thunderbird/mfxq8yi7.default-esr
#    mkdir chrome
#    cd chrome
#    ln -s ~/Documents/GitHub/Chromebook-linux/setup_mint_files/userChrome.css userChrome.css

# https://superuser.com/questions/13518/change-the-default-sorting-order-in-thunderbird
# go into settings / config editor (advanced preferences) / mailnews.default
# see above to change default: sort order (2  = decending)
#                              sort type  (21 = based on order received)
#                              sort flag  (0  = unthreaded)

##-----------------------------------------------------------------------------
# VLC
# installed with software manager

# alternately could use
# sudo apt-get install vlc



###-----------------------------------------------------------------------------
## YouTube-DL (requires Python to run)
#sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
#sudo chmod a+rx /usr/local/bin/youtube-dl


##-----------------------------------------------------------------------------
# Anaconda
# installation instructions: https://docs.anaconda.com/anaconda/install/linux/
sudo apt-get install libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6
cd ~/Downloads
curl -O https://repo.anaconda.com/archive/Anaconda3-2024.06-1-Linux-x86_64.sh
# compared following to expected shasum here: https://repo.anaconda.com/archive/
shasum -a 256 Anaconda3-2024.06-1-Linux-x86_64.sh
bash Anaconda3-2024.06-1-Linux-x86_64.sh
# install to /home/<USER>/anaconda3
# choose yes to automatically activate conda
# should not need the following
#    source ~/anaconda3/bin/activate 
#    conda init


#------------------------
# Brave (use this instead of flatpak)
# https://brave.com/linux/
sudo apt install curl
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install brave-browser

## to remove
#sudo apt purge brave-browser
#sudo rm /etc/apt/sources.list.d/brave-browser-release.list
#sudo apt-key del A8580BDC82D3DC6C
#rm -rf ~/.config/BraveSoftware
#rm -rf ~/.cache/BraveSoftware


#------------------------
# auto-mount ntfs drives
# https://www.cyberciti.biz/faq/debian-ubuntu-linux-auto-mounting-windows-ntfs-file-system/
sudo apt-get install ntfs-3g
# find UUIDs of drives
lsblk
sudo blkid /dev/sda2
sudo blkid /dev/sdb1
# modify /etc/fstab; see copy at $github_path/setup_mint_files/fstab
# test mount
sudo /usr/bin/mount -a   # this failed with insufficient permission

# hard to see NTFS files because of green background when use ls command
# fixed creating and evaluating .dircolors file
# first found current settings with: dircolors -p > ~/.dircolors
# modified .dircolors file and executed by adding following to _bash_aliases
eval "$(dircolors $git_path/Chromebook-linux/setup_mint_files/.dircolors)"


#------------------------
# VS Code (Microsoft Visual Studio Code) (31 GB = 62% full before install; xxxx after install)
# https://www.linuxcapable.com/how-to-install-microsoft-visual-studio-code-on-debian-11/
# update system to avoid conflicts
sudo apt update && sudo apt upgrade -y
# install package to assist in installing software
sudo apt install software-properties-common apt-transport-https wget -y
# import Microsoft GPG key
wget -O- https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /usr/share/keyrings/vscode.gpg
# import Michrosoft Visual Source Repository
echo deb [arch=amd64 signed-by=/usr/share/keyrings/vscode.gpg] https://packages.microsoft.com/repos/vscode stable main | sudo tee /etc/apt/sources.list.d/vscode.list
# update system again
sudo apt update
# install VS Code
sudo apt install code -y

# launch
# code

# to remove
# sudo apt remove code --purge
# sudo rm /etc/apt/sources.list.d/vscode.list
# sudo rm /usr/share/keyrings/vscode.gpg

##----------------------------------------------------------------------------
## OnlyOffice <-- sofware manager / onlyoffice <-- flatpak available

## or do it the old fashioned way
## Add GPG key:
#mkdir -p -m 700 ~/.gnupg
#gpg --no-default-keyring --keyring gnupg-ring:/tmp/onlyoffice.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys CB2DE8E5
#chmod 644 /tmp/onlyoffice.gpg
#sudo chown root:root /tmp/onlyoffice.gpg
#sudo mv /tmp/onlyoffice.gpg /usr/share/keyrings/onlyoffice.gpg
### Add desktop editors repository:
#echo 'deb [signed-by=/usr/share/keyrings/onlyoffice.gpg] https://download.onlyoffice.com/repo/debian squeeze main' | sudo tee -a /etc/apt/sources.list.d/onlyoffice.list
### Update the package manager cache:
#sudo apt-get update
### Now the editors can be easily installed using the following command:
#sudo apt-get install onlyoffice-desktopeditors


#------------------------
# digikam
# installed with search / software manager (not synaptic package manager)
# installed the system version rather than Flathub


#------------------------
# Gimp
# installed with search / software manager (not synaptic package manager)
# installed Flatpack rather than system version


##-----------------------------------------------------------------------------
# SIGNAL FOR POTENTIAL USE AS GROUP VIDEO CONFERENCE
# https://signal.org/download/linux/
# NOTE: These instructions only work for 64-bit Debian-based
# Linux distributions such as Ubuntu, Mint etc.

# 1. Install our official public software signing key:
cd ~/Downloads
wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
cat signal-desktop-keyring.gpg | sudo tee /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null

# 2. Add our repository to your list of repositories:
echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' |\
  sudo tee /etc/apt/sources.list.d/signal-xenial.list

# 3. Update your package database and install Signal:
sudo apt update && sudo apt install signal-desktop


##-----------------------------------------------------------------------------
# Zoom
cd ~/Downloads
wget https://zoom.us/client/latest/zoom_amd64.deb
sudo apt install ./zoom_amd64.deb
# zoom   # to launch
# sudo apt remove zoom


##-----------------------------------------------------------------------------
# Wine and PLayOnLinux (PlayOnLinux is a frontend for Wine)
# install Wine then PlayOnLinux from "Software Manager"; installed system package


##-----------------------------------------------------------------------------
## OpenSCAD
# used "Software Manager" to install system package instead of the commands below
## https://openscad.org/downloads.html
# sudo apt-get install openscad



##-----------------------------------------------------------------------------
# RSTUDIO (R was preinstalled with LMDE)
# first, note that I installed LMDE 6 which is based on Debian 12 Bookworm

# https://linuxcapable.com/how-to-install-r-programming-language-on-debian-linux/
# update system
sudo apt update
sudo apt upgrade

# update version of R
apt remove r-base-core
apt install -t bookworm-cran40 r-base


# https://cran.r-project.org/bin/linux/debian/
# https://rpubs.com/hrpunio/1153216
# install required packages
sudo apt install dirmngr apt-transport-https ca-certificates software-properties-common -y
# import CRAN respository
R=https://cloud.r-project.org/bin/linux/debian bookworm-cran40/
echo "deb [signed-by=/usr/share/keyrings/cran.gpg] ${R}" | sudo tee /etc/apt/sources.list.d/cran.list
# update R packages
apt install libv8-dev
apt install lib-sodium.h
apt install libopenblas-dev
update.packages(ask = FALSE)
sudo apt install r-base-core r-base-dev


# deb http://cloud.r-project.org/bin/linux/debian bookworm-cran40/
# sudo apt install r-base
# R --version


# https://computingforgeeks.com/how-to-install-r-and-rstudio-on-debian/
# https://ahmorris.org/post/2023-09-16-install-rstudio-on-debian-12-bookworm/
# https://cloud.r-project.org/bin/linux/debian/

# install RStudio
cd ~/Downloads
sudo apt -y install wget
# downloaded deb file from https://posit.co/download/rstudio-desktop/
wget https://download1.rstudio.org/electron/jammy/amd64/rstudio-2024.12.1-563-amd64.deb

# obtain public key
gpg --keyserver keys.openpgp.org --search-keys 51C0B5BB19F92D60
# asked to "Enger number(s), N)ext, or Q)uit". I entered 1.

# validate signture
gpg --verify rstudio-2024.12.1-563-amd64.deb

# install
sudo apt install -f ./rstudio-2024.12.1-563-amd64.deb

# launch RStudio
rstudio

# install a couple things needed to support various packages (RTools not needed on Linux, only Windows)
sudo apt install libcurl4-openssl-dev
sudo apt install cmake


##-----------------------------------------------------------------------------
# Nomacs picture viewer
flatpak install flathub org.nomacs.ImageLounge


##-----------------------------------------------------------------------------
# MEGA cloud storage
cd ~/Downloads
wget https://mega.nz/linux/repo/Debian_12/amd64/megasync-Debian_12_amd64.deb
sudo apt install "$PWD/megasync-Debian_12_amd64.deb"


##-----------------------------------------------------------------------------
# rsnapshot (timeshift)
# https://rsnapshot.org/faq.html
# https://www.tecmint.com/rsnapshot-a-file-system-backup-utility-for-linux/
sudo apt-get install rsnapshot

# modify /etc/rsnapshot.conf file
# (1) changed location of snapshot_root as follows where replace USER with value of $USER
#   snapshot_root   /home/USER/.rsnapshot
#
# (2) added the following
#   #########################################
#   #           BACKUP INTERVALS            #
#   # Must be unique and in ascending order #
#   # i.e. hourly, daily, weekly, etc.      #
#   #########################################
#   
#   interval        hourly  6
#   interval        daily   7
#   interval        weekly  4
#   interval        monthly 3

# test configuration file with following
rsnapshot configtest

mkdir $HOME/.rsnapshot


#-----------------------------------------------------------------------------
# SSH Server
# https://www.socketxp.com/iot/install-setup-ssh-server-client-iot-device/

#----------------------
# on server
# install, enable, and run ssh server as a daemon in background
sudo apt-get update
sudo apt-get install openssh-server
# to start on boot
sudo systemctl enable ssh
# to start service if needed
sudo systemctl start ssh

# to see status
sudo systemctl status ssh


#----------------------
# on client
# get ip address
ip a
# under <BROADCAST,MULTICAST,UP,LOWER_UP>, look for inet line:
#       inet 192.168.0.31/16 brd 192.168.0.255 scope global dynamic noprefixroute enp0s3
#            ------------                                                         ------
# then short ip address would be:
#       192.168.0.31
# the long ip address would be:
#       192.168.0.31/16
# with network interface
#       enp0s3


#----------------------
# on server
# configure firewall to allow incoming connections on port 22 (default ssh port)
# entered following but replaced the `192.168.0.31/16` with the long client ip address
sudo ufw allow from 192.168.0.31/16 to any port 22


#----------------------
# on client

# install ssh client
sudo apt-get update
sudo apt-get install openssh-client

# on client, log into server with:
ssh username_on_server@server_ip_address
# Got a message that "The authenticity of host `server ip address` could not be established.
# Asked if I wanted to continue connecting. Answer `yes`
# Warning that the server ip was permanently added to list of known hosts [on client]
# Enter server password.

# on client, log out of server
exit

# setup ssh keys
ssh-keygen -t rsa -C 'user_name_on_client@client_pc_name'
# where user_name_on_client@client_pc_name from client terminal prompt
# the -C comment may be unnecessary

# copy the contents of the pub key to the ~/.ssh/authorized_keys file on the server
# by entering the following on the client while still logged out of server
ssh-copy-id -i mykey.pub username_on_server@server_ip_address
# where user_name_on_server is from user_name_on_server@server_pc_name on server terminal prompt
#       servier_ip_address is the short version of the ip (e.g., 192.168.0.31)


#----------------------
# on server
# disable password authentication
# open ssh server config file
sudo emacs /etc/ssh/sshd_config
# search for following keywords and set as follows
#    PasswordAuthentication no
#    PubkeyAuthentication yes
#    MaxAuthTries 3

# giving up on the following for now
# https://goteleport.com/blog/ssh-hardening-to-prevent-brute-force-attacks/
# the following provides backup protection to the same thing what was done in the firewall
# in /etc/hosts.deny, set the following (everything was originally commented out)
#    ALL: ALL
# in /etc/hosts.allow, set the following were my_client_IP is replaced with the allowed client IP
#    ALL: my_clisudent_IP

# restart service
sudo service ssh restart

# reboot server

# if mess up sshd_config file, will get a "start request repeated too quickly" error as the system
# attempts and reattempts to restart. Find details of the error by inspecting output from:
#      journalctl -e
# then manually start service again and check status
#      sudo systemctl start ssh
#      sudo systemctl status ssh


#----------------------
# on client

# attempt to log into server with ssh key
ssh -i ~/.ssh/mykey.pub username_on_server@server_ip_address
# where mykey is the name of the key that was created earlier

# simplify login by creating config file
# create ~/.ssh/config file containing the following
Host host_name
     HostName server_ip_address
     User username_on_server
     IdentityFile ~/.ssh/mykey
# where host_name can probably be anything (e.g., tower) or possibly needs to be
# server_pc_name which was found above

# attempt to log into server with simpler ssh command
ssh host_name


#----------------------
# to enable running GUI on server with X11 forwarding

#-----
# on server
# in /etc/ssh/sshd_config, set
#     X11Forwarding yes                  <-- this was already set
# restart the sshd daemon (only if it was not already set)
sudo systemctl restart ssh

#-----
# on client to start ssh with X11 forwarding for displaying GUI from mint on remote
# run ssh using -X
ssh -X tower

# X11 works but is very slow


#-----------------------------------------------------------------------------
# ThinLinc (an attempt to speed up ssh with GUI)
# https://www.learnlinux.tv/thinlinc-overview-and-tutorial-how-to-install-and-utilize-this-linux-remote-desktop-solution/

#------------------
# SERVER

# download thinlinc server software for administrators
# https://www.cendio.com/thinlinc/download/

# extract from zip folder by selecting in file manager
# double click on "Click to install" and follow prompts
# options:
#    - chose "Master" server rather than "Agent" server
#    - Message that "ThinLinc Commands not in Sudo PATH" so need to specify complete path when running
#      ThinLinc admin commands. Instructions to fix this in ThinLinc Administrator's Guide under
#      Installation chapter, "Run ThinLinc administration commands using sudo"

#------------------
# CLIENT

# install
# on client, download thinlinc server software for users
# https://www.cendio.com/thinlinc/download/
# downloaded DEB version
# open in file manager and double click to install

# configure and connect
# open "ThinLinc client" from start
# Options / Security / Public key (since I already set up ssh)
# entries:
#    - server  : ip address
#    - username: username on server
#    - key     : full path to ssh key (do not add the .pub extension)

# additional configuration
# potential settings: https://www.cendio.com/resources/docs/tag/client_config_params.html
# edit /opt/thinlinc/etc/tlclient.conf
# set:
#   ALLOW_HOSTKEY_UPDATE=publickey    # it was password
#   AUTOLOGIN=0                       # was 0 but can set to 1 for autologin when open ThinLinc app

# need to be logged out of server to connect with it using ThinLinc

#------------------
# CLIENT
# If getting frequent requests on serer for password associated with issue with keyring login,
# open 'start / passwords & keys when logged' into server. Right click 'Login' and change password
# to be blank. The existing password should be the same as the login password. The issue seems to
# be that the login keyring gets unlocked when manually logging into the server, but not
# when automatially logging into the server.

# Getting rid of the "Authentication is required to modify a system repository" dialogue.     # dlh error
# suggestion not tried yet
# https://www.reddit.com/r/debian/comments/mcxzp8/getting_rid_of_the_authentication_is_required/?rdt=42244
# gsettings set org.gnome.software download-updates false

# another suggestino
# gsettings set org.gnome.software download-updates-notify false

#------------------
# getting Yubikey to work with ThinLinc

https://bugzilla.cendio.com/show_bug.cgi?id=8251
https://community.thinlinc.com/t/anyone-working-fido2-token-forwarding-support/904
https://community.thinlinc.com/t/linux-remote-desktop-authentication-is-thinlinc-compatible-with-yubikey/280/2

https://community.thinlinc.com/t/smartcard-export-no-longer-working/843/17
# add following to bashrc
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/thinlinc/lib64:/opt/thinlinc/lib"



##-----------------------------------------------------------------------------
# DROPBOX
# installed system package with Software Manager


##-----------------------------------------------------------------------------
# unified remote to use phone to control pc
#https://www.unifiedremote.com/download/other#linux

# install on phone through play store

# install on server
# download deb file
# double click in file explorer
#https://www.unifiedremote.com/tutorials/how-to-install-unified-remote-server-deb-via-terminal

# in following, replace 192.168.1.0 with phone IP
sudo ufw allow from 192.168.1.0/24 to any port 9511
sudo ufw allow from 192.168.1.0/24 to any port 9512

# start service on server
alias urstart='/opt/urserver/urserver-start'
alias urstop='/opt/urserver/urserver-stop'
urstart

# to uninstall, delete rules from firewall and run following
# sudo dpkg -r urserver

# not sure if I am going to keep this.

#-----------------------------------------------------------------------------
# fix overscan when connect HDMI to TV
# added commands to this repo in setup_mint_files/startup.sh
# made script executable
# identified script in start / start applications


##################################################
# dlh stopped here
##################################################

error if run
rsnapshot hourly

when fix above, need to continue from step 6 automating section of the help page
https://www.tecmint.com/rsnapshot-a-file-system-backup-utility-for-linux/



#-----------------------------------------------------------------------------
# install common packages for R

# avaliable packages: https://cran.rstudio.com/
# install packages (use R rather than Rstudio for speed)
/usr/bin/R
#
# qualityTools (needed for qqplot)
# install.packages('qualityTools')  # not available for R v4.0.4
install.packages('remotes')
remotes::install_version('qualityTools', '1.55')  # google search shows v1.55 is latest
install.packages('matlib')
install.packages('tibble')
install.packages('readxl')
install.packages('ggplot2')
install.packages('plotly')         # required above openssl install
install.packages('RColorBrewer')   # required above libcurl4 install
install.packages('dplyr')
install.packages('reticulate')
install.packages('superml')
install.packages('DT')
install.packages('stringi')
install.packages('stringr')
install.packages('tolerance')
install.packages('rgl')
install.packages('IAPWS95')
install.packages('maxLik')         # maximum likelihood estimation
install.packages('SuppDists')      # statistical package
install.packages('ExtDist')        # statistical package

# downloaded source packages should get removed automatically at some point
# if not, look here and in similar folders
# rm -r /tmp/RtmpXCABpo/downloaded_packages

# to remove:
remove_r() {
   sudo apt-get remove rstudio      # rstudio
   rm -r ~/.local/share/rstudio     # rstudio settings
   sudo apt-get remove r-base       # R packages
   sudo apt-get remove r-base-core  # R and possibly some packages
}
# remove_r



##-----------------------------------------------------------------------------
## CHEESE - program needed for endoscope to work on Chromebook
## launch with "cheese"


#------------------------
## KeePassXC


##-----------------------------------------------------------------------------
## KEEPASS
## keyanywhere plugin does not seem to work on Linux so cannot link to dropbox
## could map to dropbox but I do not want to because of space issues
sudo apt-get update
sudo apt-get install keepass2
## launch with "keepass2" or "kp2" alias
sudo apt-get install keepassxc
## launch with "keepassxc" or "kpx" alias


##-----------------------------------------------------------------------------
## QUARTO
## installed as extension within vscode so do not think I need the following
## download deb file from web
## sudo dpkg -i ~/Downloads/quarto-1.3.290-linux-amd64.deb
## to remove quarto
## sudo apt-get remove quarto


##-----------------------------------------------------------------------------
## Foxit PDF reader
## download tar file from https://www.foxit.com/downloads/pdf-reader-thanks.html?product=Foxit-Reader&platform=Linux-64-bit&version=&package_type=&language=English&formId=download-reader
pd ~/Downloads
tar xzvf FoxitReader*.tar.gz
sudo chmod a+x FoxitReader*.run
sudo ./FoxitReader*.run
## usage: FoxitReader &
## to uninstall:
##    sudo /opt/foxitsoftware/foxitreader/maintenancetool


##-----------------------------------------------------------------------------
## OCRmyPDF
## install ghostscript (required)
????????????
## install tesseract (required)
???????????
## install ocrmypdf
sudo apt install ocrmypdf


##-----------------------------------------------------------------------------
## command line fuzzy finder
## https://github.com/junegunn/fzf#using-linux-package-managers
## following did not work so commented out and instead wrote fh function
## sudo apt install fzf
## copy shell/key-bindings.bash into fuzzy_finder.bash


###-----------------------------------------------------------------------------
###-----------------------------------------------------------------------------
### auto-mount usb drives
## https://github.com/Ferk/udev-media-automount
## download: https://github.com/Ferk/udev-media-automount/archive/refs/heads/master.zip
#unzip master.zip
#cd udev-media-automount-master
#sudo make install
#sudo udevadm control --reload-rules
#sudo udevadm trigger


##-----------------------------------------------------------------------------
## SSH - install as client (i.e., not the server)
sudo apt install openssh-client

## On Windows, follow instructions here:
## https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui
## Username can be found by entering following in Windows PowerShell
##      $env:USERNAME
## and servername can be found by entering following in Windows PowerShell
##      ipconfig | select-string  ('(\s)+IPv4.+\s(?<IP>(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}))(\s)*') -AllMatches | %{ $_.Matches } | % { $_.Groups["IP"]} | %{ $_.Value }
## Log into remote PC from linux using password at the prompt (e.g., ssh jack@192.168.1.101):
##      ssh username@servername
## The above does not work with MS Account. Need stand alone account. Grrr#!!**!
## https://answers.microsoft.com/en-us/windows/forum/all/ssh-login-to-microsoft-account-linked-windows/69ea0428-5b06-401c-bb86-e45228709e0b
##

## IDEA:
##    - Create local admin account
##    - Change MS linked account to "standard user"
##    - ssh into local admin account (or would it be better to ssh into local standard user account?)

## If can log in using the above, can replace password to ssh with a keypair. 
## On Linux, generate new ssh keypair
## (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=linux)
## From terminal where found username@servername on Windows from above: 
##      cd ~/.ssh
##      ssh-keygen -t ed25519 -C "username@servername"
## Name the key, e.g., id_ed25519_keyname (creates id_ed25519_keyname and id_ed25519_keyname.pub).
## Recommended to add a pin for the key.
## Start ssh agent
##      eval "$(ssh-agent -s)"
## Add private key to agent
##      ssh-add ~/.ssh/id_ed25519_keyname
## To remove private key from agent
##      ssh-add -d ~/.ssh/id_ed25519_keyname
## From Linux while logged into Windows PC through ssh, enter the following in terminal
## to add the public key to Windows in ~/.ssh/authorized_keys file.
##      ssh-copy-id -i ~/.ssh/id_ed25519_keyname.pub username@servername
## above step failed so tried looking here:
## https://superuser.com/questions/1451241/command-to-copy-client-public-key-to-windows-openssh-sftp-ssh-server-authorized
## and used manual process:
##     - Copy xxxxxx.pub file to windows server at location C:\Users\username\.ssh\authorized_keys
##     - Update ACL on windows server using command
##             icacls.exe "C:\Users\username\.ssh" /inheritance:r /gr
## Still not able to log in with keypair.
## Again tried following which automatically created authorized_keys file
##     - In Windows C:/Users/username, moved manually created authorized_keys file to authorized_keys_junk
##     - In Linux ssh session, entered: ssh-copy-id username@servername
## Next ssh should only require pin and not password, but it still is asking for a password.

##-----------------------------------------------------------------------------
## Gramps

# first tried system package
# did not seem to include `edit/addon manager`. Did find addon manager in menu but nothing populated.

# https://gramps-project.org/wiki/index.php/Installing_Gramps_for_Linux_computers#Debian_package
sudo flatpak install flathub org.gramps_project.Gramps


## alternately:
Building from Source (Advanced Users):
Install necessary dependencies:
sudo apt install git
sudo apt install python3-dev
sudo apt install python3-pip
sudo apt install build-essential
sudo apt install libgspell-1-dev
sudo apt install libxml2-dev
sudo apt install libxslt-dev
sudo apt install libglib2.0-dev
sudo apt install libgdk-pixbuf2.0-dev
sudo apt install libgtk2.0-dev
sudo apt install libpango-dev
sudo apt install libwebkitgtk-1.0-dev
sudo apt install libsqlite3-dev
sudo apt install libldap2-dev
sudo apt install libpcre3-dev
sudo apt install libffi-dev
sudo apt install libpython3-dev
sudo apt install python3-setuptools
Clone the Gramps repository: git clone https://github.com/gramps-project/gramps.git Gramps
Navigate to the Gramps directory: cd Gramps
Create a build directory: mkdir build
Navigate to the build directory: cd build
Configure the build: cmake ..
Build Gramps: make
Install Gramps: sudo make install 


##-----------------------------------------------------------------------------
##-----------------------------------------------------------------------------
# To update system
# try peppermint_hub / hardware & software / update manager
# or manual or automatic method described at: 
#     https://www.fosslinux.com/49955/keep-your-debian-updated.htm

## manual method
sudo apt update
apt list --upgradable
# if above only returns "Listing... Done" then there is nothing to update
# to upgrade a specific package
sudo apt --only-upgrade install <package_name>
# to upgrade everything
sudo apt upgrade -y
# clean up when done
sudo apt-get clean
# also run the following
sudo apt-get autoclean

## automatic method
## programmed into update function in _bash_aliases
